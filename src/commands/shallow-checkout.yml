description: >
  Checkout repository via git shalow clone, no submodules, no LFS resolution.
  Extends the default CircleCi `checkout` command.
parameters:
  depth:
    description: >
      Limit shallow clone depth with a history truncated to the specified number of commits.
      Implies a clone operation with `--single-branch`. See: https://git-scm.com/docs/git-clone
    type: integer
    default: 1
  fetch_depth:
    description: >
      Limit fetch depth to the specified number of commits from the tip of each remote branch history.
      Ths will deepen or shorten the history to the specified number of commits defined in `depth` above.
      Tags for the deepened commits are not fetched. See: https://git-scm.com/docs/git-fetch
    type: integer
    default: 10
  path:
    description: >
      By default, checkout path is ~/project, this can be overrridden.
    type: string
    default: ~/project
  fetch_lfs:
    description: >
      By default (false), export GIT_LFS_SKIP_SMUDGE=1 to prevent resolution of LFS pointers.
      When `true`, LFS pointers are resolved via the default smudge filter.
    type: boolean
    default: false
  fetch_submodules:
    description: >
      By default (false), submodules are not initialized or fetched.
      When `true`, included submodules are initialized and fetched.
    type: boolean
    default: false
  keyscan_github:
    description: >
      When `true` dynamically fetch the ssh-rsa from `github.com` as opposed to using the
      default provided key.
    type: boolean
    default: false
  keyscan_bitbucket:
    description: >
      When `true` dynamically fetch the ssh-rsa from `bitbucket.org` as opposed to using the
      default provided key.
    type: boolean
    default: false
  debug:
    description: >
      When `true`, debug command logging is enabled
    type: boolean
    default: false
steps:
  - run:
      name: shallow-checkout
      command: |
        #!/bin/sh
        set -e

        if [ "<< parameters.debug >>" == "true" ]
        then
          set -x
        fi

        # Workaround old docker images with incorrect $HOME
        # check https://github.com/docker/docker/issues/2968 for details
        if [ "${HOME}" = "/" ]
        then
          export HOME=$(getent passwd $(id -un) | cut -d: -f6)
        fi

        # setup .ssh directory / known hosts / auth
        export SSH_CONFIG_DIR=${SSH_CONFIG_DIR:-"${HOME}/.ssh"}
        echo Using SSH Config Dir $SSH_CONFIG_DIR
        mkdir -p $SSH_CONFIG_DIR

        if [ -x "$(command -v ssh-keyscan)" ] && ([ "<< parameters.keyscan_github >>" == "true" ] || [ "<< parameters.keyscan_bitbucket >>" == "true" ])
        then
          if [ "<< parameters.keyscan_github >>" == "true" ]
          then
            ssh-keyscan -H github.com >> $SSH_CONFIG_DIR/known_hosts
          fi
          if [ "<< parameters.keyscan_bitbucket >>" == "true" ]
          then
            ssh-keyscan -H bitbucket.org >> $SSH_CONFIG_DIR/known_hosts
          fi
        fi

        if [ "<< parameters.keyscan_github >>" != "true" ]
        then
          echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=' >> $SSH_CONFIG_DIR/known_hosts
        fi

        if [ "<< parameters.keyscan_bitbucket >>" != "true" ]
        then
          echo 'bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDQeJzhupRu0u0cdegZIa8e86EG2qOCsIsD1Xw0xSeiPDlCr7kq97NLmMbpKTX6Esc30NuoqEEHCuc7yWtwp8dI76EEEB1VqY9QJq6vk+aySyboD5QF61I/1WeTwu+deCbgKMGbUijeXhtfbxSxm6JwGrXrhBdofTsbKRUsrN1WoNgUa8uqN1Vx6WAJw1JHPhglEGGHea6QICwJOAr/6mrui/oB7pkaWKHj3z7d1IC4KWLtY47elvjbaTlkN04Kc/5LFEirorGYVbt15kAUlqGM65pk6ZBxtaO3+30LVlORZkxOh+LKL/BvbZ/iRNhItLqNyieoQj/uh/7Iv4uyH/cV/0b4WDSd3DptigWq84lJubb9t/DnZlrJazxyDCulTmKdOR7vs9gMTo+uoIrPSb8ScTtvw65+odKAlBj59dhnVp9zd7QUojOpXlL62Aw56U4oO+FALuevvMjiWeavKhJqlR7i5n9srYcrNV7ttmDw7kf/97P5zauIhxcjX+xHv4M=
        ' >> $SSH_CONFIG_DIR/known_hosts
        fi

        (umask 077; touch $SSH_CONFIG_DIR/id_rsa)
        chmod 0600 $SSH_CONFIG_DIR/id_rsa
        (echo $CHECKOUT_KEY > $SSH_CONFIG_DIR/id_rsa)

        export GIT_SSH_COMMAND='ssh -i $SSH_CONFIG_DIR/id_rsa -o UserKnownHostsFile=$SSH_CONFIG_DIR/known_hosts'
        # use git+ssh instead of https
        git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
        git config --global gc.auto 0 || true

        # skip LFS smudging if enabled
        if [ "<< parameters.fetch_lfs >>" != "true" ]
        then
          export GIT_LFS_SKIP_SMUDGE=1
        fi

        # if path is set, use it, otherwise use a default
        CHECKOUT_PATH="${HOME}/project"
        if [ "<< parameters.path >>" != "" ]
        then
          eval CHECKOUT_PATH="<< parameters.path >>"
          rm -r $CHECKOUT_PATH || true
        fi

        # setup / checkout repository
        if [ -e "${CHECKOUT_PATH}/.git" ]
        then
          cd "${CHECKOUT_PATH}"
          git remote set-url origin "$CIRCLE_REPOSITORY_URL" || true
        else
          mkdir -p "${CHECKOUT_PATH}"
          cd "${CHECKOUT_PATH}"
          git clone --depth << parameters.depth >> --shallow-submodules "$CIRCLE_REPOSITORY_URL" .
        fi

        if [ "<< parameters.path >>" != "" ]
        then
          eval CIRCLE_WORKING_DIRECTORY=$CIRCLE_WORKING_DIRECTORY
          mkdir -p $CIRCLE_WORKING_DIRECTORY
        fi

        # tag, pr, others (master / main)
        if [ -n "$CIRCLE_TAG" ]
        then
          git fetch -t --depth << parameters.fetch_depth >> --no-recurse-submodules --force origin "refs/tags/${CIRCLE_TAG}"
        elif [[ $(echo $CIRCLE_BRANCH | grep -e ^pull\/*) ]] # sh version of bash `elif [[ "$CIRCLE_BRANCH" =~ ^pull\/* ]]`
        then
          git fetch --depth << parameters.fetch_depth >> --no-recurse-submodules --force origin "${CIRCLE_BRANCH}/head:remotes/origin/${CIRCLE_BRANCH}"
        else
          git fetch --depth=<< parameters.fetch_depth >> --no-recurse-submodules --force origin "$CIRCLE_BRANCH:remotes/origin/$CIRCLE_BRANCH"
        fi

        if [ -n "$CIRCLE_TAG" ]
        then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q "$CIRCLE_TAG"
        elif [ -n "$CIRCLE_BRANCH" ] && [ "$CIRCLE_BRANCH" != 'HEAD' ]
        then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q -B "$CIRCLE_BRANCH"
        fi

        git reset --hard "$CIRCLE_SHA1"

        if [ "<< parameters.fetch_submodules >>" == "true" ]
        then
          git submodule update --init --recursive
        fi
